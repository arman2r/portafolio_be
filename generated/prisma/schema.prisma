// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DB_URL") // Usar puerto 5432 para migraciones
  extensions   = [pgcrypto]
  relationMode = "prisma"
}

model skill {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  workedTime  Int
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz
}

model experience {
  id          Int      @id @default(autoincrement())
  company     String
  position    String
  description String
  yearStart   String
  yearEnd     String
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz
}

model subscribers {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique
  names           String?
  lastNames       String?
  phone           String?
  isConfirmed     Boolean?          @default(false)
  codeConfirm     Int?
  createdAt       DateTime          @default(now()) @db.Timestamptz
  updatedAt       DateTime          @updatedAt @db.Timestamptz
  likeSubscribers likeSubscribers[]

  VerificationCode verificationCode[]
}

model verificationCode {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  code      String   @db.VarChar(6) // Código de 6 dígitos
  expiresAt DateTime @db.Timestamptz // Fecha de expiración
  createdAt DateTime @default(now()) @db.Timestamptz

  // Relación con subscriber (opcional)
  subscriberEmail String? // Campo escalar
  subscriber      subscribers? @relation(fields: [subscriberEmail], references: [email])

  // Relación con userAdmin (opcional)
  userAdminEmail String?
  userAdmin      userAdmin? @relation(fields: [userAdminEmail], references: [email])

  // Restricciones
  @@unique([code, subscriberEmail, userAdminEmail]) // Código único por tipo de usuario
  @@index([subscriberEmail])
  @@index([userAdminEmail])
}

model userAdmin {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String   @unique
  names       String?
  lastNames   String?
  phone       String?
  password    String
  isConfirmed Boolean? @default(false)
  codeConfirm Int?
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz

  VerificationCode verificationCode[]
}

model likeSubscribers {
  id           Int         @id @default(autoincrement())
  subscriberId String
  subscriber   subscribers @relation(fields: [subscriberId], references: [id])
  urlSection   String
  createdAt    DateTime    @default(now()) @db.Timestamptz
  updatedAt    DateTime    @updatedAt @db.Timestamptz

  @@index([subscriberId])
}
